#include "emulator.h"
using namespace nes;

#include <iostream>

Emulator::Emulator()
    : cpu_(bus_)
{
    cycle_interval_ = std::chrono::nanoseconds(559);

    const std::uint8_t binary[] = {
        0xa9, 0x48, 0x8d, 0x00, 0x01, 0xa9, 0x65, 0x8d, 0x01, 0x01, 0xa9, 0x6c, 0x8d, 0x02, 0x01, 0xa9, 
        0x6c, 0x8d, 0x03, 0x01, 0xa9, 0x6f, 0x8d, 0x04, 0x01, 0xa9, 0x20, 0x8d, 0x05, 0x01, 0xa9, 0x77, 
        0x8d, 0x06, 0x01, 0xa9, 0x6f, 0x8d, 0x07, 0x01, 0xa9, 0x72, 0x8d, 0x08, 0x01, 0xa9, 0x6c, 0x8d,
        0x09, 0x01, 0xa9, 0x64, 0x8d, 0x0a, 0x01, 0xa9, 0x21, 0x8d, 0x0b, 0x01, 0x4c, 0x3c, 0x00
    };

    for (std::uint16_t i = 0; i < sizeof(binary); ++i) {
        bus_.write(i, binary[i]);
    }

    bus_.write(0xFFFC, 0x00);
    bus_.write(0xFFFD, 0x00);
    cpu_.reset();
}

void Emulator::run() {
    prev_time_ = Clock::now();
    elapsed_time_ = prev_time_ - prev_time_;
    for (;;) {
        auto curr_time = Clock::now();
        elapsed_time_ += curr_time - prev_time_;
        prev_time_ = curr_time;

        while (elapsed_time_ > cycle_interval_) {
            cpu_.cycle();
            elapsed_time_ -= cycle_interval_;
        }

        std::cout << '\r';
        for (std::uint16_t i = 0; i < 12; ++i) {
            std::cout << static_cast<char>(bus_.read(0x100 + i));
        }
    }
}